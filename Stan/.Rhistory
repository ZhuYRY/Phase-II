cor(cats$Bwt, cats$Hwt)
cor.test(cats$Bwt, cats$Hwt)
fit_c
fit_c = glm(Hwt~Bwt, data = cats)
fit_c
fit_c$residuals
#fit_c$residuals
residuals(fit_c)
#fit_c$residuals
#residuals(fit_c)
summary(fit_c$residuals)
#fit_c$residuals
#residuals(fit_c)
sd(fit_c$residuals)
#fit_c$residuals
#residuals(fit_c)
var(fit_c$residuals)
#fit_c$residuals
#residuals(fit_c)
sqrt(var(fit_c$residuals))
rm(list = ls())
# Produce scatterplot (ggplot)
# install.packages("ggplot2")
library(ggplot2)
# Add corr coef and p-value in ggplot (stat_cor)
# install.packages("ggpubr")
library(ggpubr)
# x: education / y: salary
x = c(9, 10, 12, 12, 14, 15, 16, 16, 17, 22)
y = c(11, 19, 28, 49, 25, 33, 18, 44, 54, 105)
dat = data.frame(x = x, y = y)
t(dat)
# Scatter plot
ggplot(data = dat, aes(x = x, y = y)) + geom_point() +
geom_smooth(method='lm',formula = y ~ x, se = TRUE, color = "red") +
stat_cor(method = "pearson", size = 6, label.x = 10, label.y = 90) + theme_bw() +
ggtitle("Scatter plot") + theme(plot.title = element_text(hjust = 0.5))
# Correlation coefficient (linearity check)
cor.test(dat$x, dat$y)
ggplot(data=cats) +
geom_point(aes(x=Bwt, y=Hwt)) +
geom_smooth(method='lm',formula = y ~ x, se = TRUE, color = "red") +
stat_cor(method = "pearson", size = 6, label.x = 10, label.y = 90) +
theme_bw() +
ggtitle("Scatter plot") + theme(plot.title = element_text(hjust = 0.5))
ggplot(data=cats) +
geom_point(aes(x=Bwt, y=Hwt)) +
geom_smooth(method='lm',formula = Hwt ~ Bwt, se = TRUE, color = "red") +
stat_cor(method = "pearson", size = 6, label.x = 10, label.y = 90) +
theme_bw() +
ggtitle("Scatter plot") + theme(plot.title = element_text(hjust = 0.5))
ggplot(data = dat, aes(x = x, y = y)) + geom_point() +
geom_smooth(method='lm',formula = y ~ x, se = TRUE, color = "red") +
stat_cor(method = "pearson", size = 6, label.x = 10, label.y = 90) + theme_bw() +
ggtitle("Scatter plot") + theme(plot.title = element_text(hjust = 0.5))
ggplot(data=cats) +
geom_point(aes(x=Bwt, y=Hwt)) +
#geom_smooth(method='lm',formula = Hwt ~ Bwt, se = TRUE, color = "red") +
stat_cor(method = "pearson", size = 6, label.x = 10, label.y = 90) +
theme_bw() +
ggtitle("Scatter plot") + theme(plot.title = element_text(hjust = 0.5))
library("MASS")
library("ggplot2")
ggplot(data=cats) +
geom_point(aes(x=Bwt, y=Hwt)) +
#geom_smooth(method='lm',formula = Hwt ~ Bwt, se = TRUE, color = "red") +
stat_cor(method = "pearson", size = 6, label.x = 10, label.y = 90) +
theme_bw() +
ggtitle("Scatter plot") + theme(plot.title = element_text(hjust = 0.5))
ggplot(data=cats) +
geom_point(aes(x=Bwt, y=Hwt)) +
ggtitle("Scatter plot") + theme(plot.title = element_text(hjust = 0.5))
fit_c = lm(Hwt~Bwt, data = cats)
fit_c
fit_c = glm(Hwt~Bwt, data = cats)
summary(fit_c)
fit_c = lm(Hwt~Bwt, data = cats)
summary(fit_c)
ggplot(data=cats) +
geom_point(aes(x=Bwt, y=Hwt)) +
ggtitle("Scatter plot of Bwt vs. Hwt") + theme(plot.title = element_text(hjust = 0.5))
anova(fit_c)
shapiro.test(residuals(fit_c))
knitr::opts_chunk$set(echo = FALSE)
options(digits=6)
a = 1
b = 1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 2
b = 3
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 25
b = 30
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 250
b = 300
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 9
b = 1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 90
b = 10
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 0.90
b = 0.10
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 1
b = 1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 0.090
b = 0.010
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
p = rep(0, 95-81)
for (i in 82:95) {
#a = i+1
data_bin = list(N = 100, y = i)
fit_bin = stan(file = 'beta_binom.stan', data = data_bin, iter = iter, seed = seed)
draws = as.data.frame(fit_bin)
p[i-81] = sum(draws$theta<=0.92)/nrow(draws)
}
library('rstan')
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
seed = 2021
p = rep(0, 95-81)
for (i in 82:95) {
#a = i+1
data_bin = list(N = 100, y = i)
fit_bin = stan(file = 'beta_binom.stan', data = data_bin, iter = iter, seed = seed)
draws = as.data.frame(fit_bin)
p[i-81] = sum(draws$theta<=0.92)/nrow(draws)
}
p = rep(0, 95-81)
iter = 1000
for (i in 82:95) {
#a = i+1
data_bin = list(N = 100, y = i)
fit_bin = stan(file = 'beta_binom.stan', data = data_bin, iter = iter, seed = seed)
draws = as.data.frame(fit_bin)
p[i-81] = sum(draws$theta<=0.92)/nrow(draws)
}
plot(82:95, p, type="o", pch="o", lty=1, col="black",
xlab = "Number of Success (Y)",
ylab = "Probability",
main = "Posterior distribution of theta")
axis(side = 1, at = seq(82, 95, by=1))#, las=2)
abline(h = 0.92, col="red")
legend(x = "topright", legend=c("0.92"),
col=c("red"), lty=1, lwd=2, cex=0.75)
plot(82:95, p, type="o", pch="o", lty=1, col="black",
xlab = "Number of Success (Y)",
ylab = "Probability",
main = "Posterior distribution of theta")
axis(side = 1, at = seq(82, 95, by=1))#, las=2)
abline(h = 0.92, col="red")
legend(x = "topright", legend=c("0.92"),
col=c("red"), lty=1, lwd=2, cex=0.75)
paste("P|Y=88:", p[88-81])
paste("P|Y=87:", p[87-81])
plot(82:95, p, type="o", pch="o", lty=1, col="black",
xlab = "Number of Success (Y)",
ylab = "Probability",
main = "Posterior distribution of theta",
sub = "a = 1")
axis(side = 1, at = seq(82, 95, by=1))#, las=2)
abline(h = 0.92, col="red")
legend(x = "topright", legend=c("0.92"),
col=c("red"), lty=1, lwd=2, cex=0.75)
a = 0.090
b = 0.010
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
knitr::opts_chunk$set(echo = FALSE)
options(digits=6)
a = 0.09
b = 0.01
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 0.09
b = 0.01
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
p = rep(0, 95-81)
for (i in 82:95) {
#a = i+1
data_bin = list(N = 100, y = i)
fit_bin = stan(file = 'beta_binom_0.09_0.01.stan', data = data_bin, iter = iter, seed = seed)
draws = as.data.frame(fit_bin)
p[i-81] = sum(draws$theta<=0.92)/nrow(draws)
}
plot(82:95, p, type="o", pch="o", lty=1, col="black",
xlab = "Number of Success (Y)",
ylab = "Probability",
main = "Posterior distribution of theta",
sub = "a=0.09, b=0.01")
axis(side = 1, at = seq(82, 95, by=1))#, las=2)
abline(h = 0.92, col="red")
legend(x = "topright", legend=c("0.92"),
col=c("red"), lty=1, lwd=2, cex=0.75)
p[82-81]
p[81-81]
p[95-81]
paste("P|Y=87:", p[87-81])
paste("P|Y=88:", p[88-81])
a = 0.09
b = 0.01
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 0.009
b = 0.001
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 0.0009
b = 0.0001
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 9
b = 1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8
b = 1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 7
b = 0.5
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 7
b = 0.7
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 7
b = 1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8
b = 1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 0.8
b = 0.1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8
b = 1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = .8
b = .1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = .85
b = .1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8
b = .9
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8
b = 1.1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8/10
b = 1.1/10
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8/10
b = 0.9/10
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8/10
b = 1/10
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8/100
b = 1/100
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8/1000
b = 1/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8/1000
b = 1.1/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8.1/1000
b = 1.2/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8.2/1000
b = 1.2/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8.23/1000
b = 1.2/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8.25/1000
b = 1.2/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8.23/1000
b = 1.2/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8.5/1000
b = 1.2/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8.5/1000
b = 1.3/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8.55/1000
b = 1.3/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8.7/1000
b = 1.3/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8.8/1000
b = 1.3/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 8.7/1000
b = 1.5/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
8.7/1000
a = 8.7/1000
b = 1.5/1000
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
p = rep(0, 95-81)
for (i in 82:95) {
#a = i+1
data_bin = list(N = 100, y = i)
fit_bin = stan(file = 'beta_binom_0087_0015.stan', data = data_bin, iter = iter, seed = seed)
draws = as.data.frame(fit_bin)
p[i-81] = sum(draws$theta<=0.92)/nrow(draws)
}
plot(82:95, p, type="o", pch="o", lty=1, col="black",
xlab = "Number of Success (Y)",
ylab = "Probability",
main = "Posterior distribution of theta",
sub = "a=0.09, b=0.01")
axis(side = 1, at = seq(82, 95, by=1))#, las=2)
abline(h = 0.92, col="red")
legend(x = "topright", legend=c("0.92"),
col=c("red"), lty=1, lwd=2, cex=0.75)
paste("P|Y=87:", p[87-81])
paste("P|Y=88:", p[88-81])
paste("P|Y=88:", p[88-81])
paste("P|Y=89:", p[89-81])
a = 9
b = 1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
a = 90
b = 10
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
p = rep(0, 95-81)
for (i in 82:95) {
#a = i+1
data_bin = list(N = 100, y = i)
fit_bin = stan(file = 'beta_binom_90_10.stan', data = data_bin, iter = iter, seed = seed)
draws = as.data.frame(fit_bin)
p[i-81] = sum(draws$theta<=0.92)/nrow(draws)
}
plot(82:95, p, type="o", pch="o", lty=1, col="black",
xlab = "Number of Success (Y)",
ylab = "Probability",
main = "Posterior distribution of theta",
sub = "a=90, b=10")
axis(side = 1, at = seq(82, 95, by=1))#, las=2)
abline(h = 0.92, col="red")
legend(x = "topright", legend=c("0.92"),
col=c("red"), lty=1, lwd=2, cex=0.75)
paste("P|Y=88:", p[88-81])
paste("P|Y=89:", p[89-81])
knitr::opts_chunk$set(echo = FALSE)
options(digits=6)
#remove.packages("rstan")
#if (file.exists(".RData")) file.remove(".RData")
#install.packages('rstan')
library('rstan')
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
seed = 2021
iter = 1000
a = 1
b = 1
mean = a/(a+b)
var = (a*b)/((a+b)^2*(a+b+1))
paste("mean = ",mean)
paste("variance = ", var)
p = rep(0, 95-81)
for (i in 82:95) {
#a = i+1
data_bin = list(N = 100, y = i)
fit_bin = stan(file = 'beta_binom_1_1.stan', data = data_bin, iter = iter, seed = seed)
draws = as.data.frame(fit_bin)
p[i-81] = sum(draws$theta<=0.92)/nrow(draws)
}
